{{- if .Values.statusProvisioner.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: spark-status-provisioner
  labels:
    app.kubernetes.io/instance: {{ .Release.Name }}
    {{- include "all_objects_labels" . | nindent 4 }}
  annotations:
    "argocd.argoproj.io/hook": "PostSync"
    "argocd.argoproj.io/hook-delete-policy": "HookSucceeded"
    "helm.sh/hook-delete-policy": "before-hook-creation"
    "helm.sh/hook": "post-install,post-upgrade"
    "helm.sh/hook-weight": "10"
spec:
  ttlSecondsAfterFinished: {{ .Values.statusProvisioner.lifetimeAfterCompletion }}
  template:
    metadata:
      name: spark-status-provisioner
      labels:
        component: status-provisioner
        {{- include "all_objects_labels" . | nindent 8 }}
    spec:
      {{- if .Values.statusProvisioner.priorityClassName }}
      priorityClassName: {{ .Values.statusProvisioner.priorityClassName }}
      {{- end }}
      restartPolicy: Never
      serviceAccountName: spark-status-provisioner
      securityContext:
        {{- toYaml .Values.statusProvisioner.podSecurityContext | nindent 8 }}
      containers:
        - name: status-provisioner
          image: {{ template "deployment-status-provisioner.image" . }}
          imagePullPolicy: "Always"
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: MONITORED_RESOURCES
              value: "{{ include "spark.monitoredResources" . | trim | trimSuffix "," }}"
            - name: RESOURCE_TO_SET_STATUS
              value: {{ printf "batch v1 jobs spark-status-provisioner"}}
            - name: CONDITION_REASON
              value: "SparkServiceReadinessStatus"
            - name: POD_READINESS_TIMEOUT
              value: "{{ .Values.statusProvisioner.podReadinessTimeout | default 300 }}"
            - name: SUCCESSFUL_CONDITION_TYPE
              value: Successful
          {{- if index .Values "spark-integration-tests" "enabled" }}
            - name: INTEGRATION_TESTS_RESOURCE
              value: {{ printf "apps v1 deployments spark-integration-tests-runner"}}
            - name: INTEGRATION_TESTS_CONDITION_REASON
              value: "IntegrationTestsExecutionStatus"
            - name: INTEGRATION_TESTS_SUCCESSFUL_CONDITION_TYPE
              value: "Successful"
            - name: INTEGRATION_TESTS_TIMEOUT
              value: "{{ .Values.statusProvisioner.integrationTestsTimeout }}"
          {{- end }}
          resources:
            {{- toYaml .Values.statusProvisioner.resources | nindent 12 }}
          securityContext:
            {{- toYaml .Values.statusProvisioner.securityContext | nindent 12 }}
{{- end }}
